/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LanguageImport } from './routes/$language'
import { Route as IndexImport } from './routes/index'
import { Route as LanguageIndexImport } from './routes/$language/index'
import { Route as LanguageTermsImport } from './routes/$language/terms'
import { Route as LanguageSavedImport } from './routes/$language/saved'
import { Route as LanguagePrivacyPolicyImport } from './routes/$language/privacy-policy'
import { Route as LanguageResourcesIdImport } from './routes/$language/resources/$id'

// Create/Update Routes

const LanguageRoute = LanguageImport.update({
  id: '/$language',
  path: '/$language',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LanguageIndexRoute = LanguageIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LanguageRoute,
} as any)

const LanguageTermsRoute = LanguageTermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => LanguageRoute,
} as any)

const LanguageSavedRoute = LanguageSavedImport.update({
  id: '/saved',
  path: '/saved',
  getParentRoute: () => LanguageRoute,
} as any)

const LanguagePrivacyPolicyRoute = LanguagePrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => LanguageRoute,
} as any)

const LanguageResourcesIdRoute = LanguageResourcesIdImport.update({
  id: '/resources/$id',
  path: '/resources/$id',
  getParentRoute: () => LanguageRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$language': {
      id: '/$language'
      path: '/$language'
      fullPath: '/$language'
      preLoaderRoute: typeof LanguageImport
      parentRoute: typeof rootRoute
    }
    '/$language/privacy-policy': {
      id: '/$language/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/$language/privacy-policy'
      preLoaderRoute: typeof LanguagePrivacyPolicyImport
      parentRoute: typeof LanguageImport
    }
    '/$language/saved': {
      id: '/$language/saved'
      path: '/saved'
      fullPath: '/$language/saved'
      preLoaderRoute: typeof LanguageSavedImport
      parentRoute: typeof LanguageImport
    }
    '/$language/terms': {
      id: '/$language/terms'
      path: '/terms'
      fullPath: '/$language/terms'
      preLoaderRoute: typeof LanguageTermsImport
      parentRoute: typeof LanguageImport
    }
    '/$language/': {
      id: '/$language/'
      path: '/'
      fullPath: '/$language/'
      preLoaderRoute: typeof LanguageIndexImport
      parentRoute: typeof LanguageImport
    }
    '/$language/resources/$id': {
      id: '/$language/resources/$id'
      path: '/resources/$id'
      fullPath: '/$language/resources/$id'
      preLoaderRoute: typeof LanguageResourcesIdImport
      parentRoute: typeof LanguageImport
    }
  }
}

// Create and export the route tree

interface LanguageRouteChildren {
  LanguagePrivacyPolicyRoute: typeof LanguagePrivacyPolicyRoute
  LanguageSavedRoute: typeof LanguageSavedRoute
  LanguageTermsRoute: typeof LanguageTermsRoute
  LanguageIndexRoute: typeof LanguageIndexRoute
  LanguageResourcesIdRoute: typeof LanguageResourcesIdRoute
}

const LanguageRouteChildren: LanguageRouteChildren = {
  LanguagePrivacyPolicyRoute: LanguagePrivacyPolicyRoute,
  LanguageSavedRoute: LanguageSavedRoute,
  LanguageTermsRoute: LanguageTermsRoute,
  LanguageIndexRoute: LanguageIndexRoute,
  LanguageResourcesIdRoute: LanguageResourcesIdRoute,
}

const LanguageRouteWithChildren = LanguageRoute._addFileChildren(
  LanguageRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$language': typeof LanguageRouteWithChildren
  '/$language/privacy-policy': typeof LanguagePrivacyPolicyRoute
  '/$language/saved': typeof LanguageSavedRoute
  '/$language/terms': typeof LanguageTermsRoute
  '/$language/': typeof LanguageIndexRoute
  '/$language/resources/$id': typeof LanguageResourcesIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$language/privacy-policy': typeof LanguagePrivacyPolicyRoute
  '/$language/saved': typeof LanguageSavedRoute
  '/$language/terms': typeof LanguageTermsRoute
  '/$language': typeof LanguageIndexRoute
  '/$language/resources/$id': typeof LanguageResourcesIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$language': typeof LanguageRouteWithChildren
  '/$language/privacy-policy': typeof LanguagePrivacyPolicyRoute
  '/$language/saved': typeof LanguageSavedRoute
  '/$language/terms': typeof LanguageTermsRoute
  '/$language/': typeof LanguageIndexRoute
  '/$language/resources/$id': typeof LanguageResourcesIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$language'
    | '/$language/privacy-policy'
    | '/$language/saved'
    | '/$language/terms'
    | '/$language/'
    | '/$language/resources/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$language/privacy-policy'
    | '/$language/saved'
    | '/$language/terms'
    | '/$language'
    | '/$language/resources/$id'
  id:
    | '__root__'
    | '/'
    | '/$language'
    | '/$language/privacy-policy'
    | '/$language/saved'
    | '/$language/terms'
    | '/$language/'
    | '/$language/resources/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LanguageRoute: typeof LanguageRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LanguageRoute: LanguageRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$language"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$language": {
      "filePath": "$language.tsx",
      "children": [
        "/$language/privacy-policy",
        "/$language/saved",
        "/$language/terms",
        "/$language/",
        "/$language/resources/$id"
      ]
    },
    "/$language/privacy-policy": {
      "filePath": "$language/privacy-policy.tsx",
      "parent": "/$language"
    },
    "/$language/saved": {
      "filePath": "$language/saved.tsx",
      "parent": "/$language"
    },
    "/$language/terms": {
      "filePath": "$language/terms.tsx",
      "parent": "/$language"
    },
    "/$language/": {
      "filePath": "$language/index.tsx",
      "parent": "/$language"
    },
    "/$language/resources/$id": {
      "filePath": "$language/resources/$id.tsx",
      "parent": "/$language"
    }
  }
}
ROUTE_MANIFEST_END */
